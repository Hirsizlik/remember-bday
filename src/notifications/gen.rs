// This code was autogenerated with `dbus-codegen-rust -c blocking --file /usr/share/dbus-1/interfaces/org.freedesktop.portal.Notification.xml`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopPortalNotification {
    fn add_notification(&self, id: &str, notification: arg::PropMap) -> Result<(), dbus::Error>;
    fn remove_notification(&self, id: &str) -> Result<(), dbus::Error>;
    fn version(&self) -> Result<u32, dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopPortalNotificationActionInvoked {
    pub id: String,
    pub action: String,
    pub parameter: Vec<arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for OrgFreedesktopPortalNotificationActionInvoked {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.id, i);
        arg::RefArg::append(&self.action, i);
        arg::RefArg::append(&self.parameter, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPortalNotificationActionInvoked {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPortalNotificationActionInvoked {
            id: i.read()?,
            action: i.read()?,
            parameter: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPortalNotificationActionInvoked {
    const NAME: &'static str = "ActionInvoked";
    const INTERFACE: &'static str = "org.freedesktop.portal.Notification";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopPortalNotification for blocking::Proxy<'a, C> {

    fn add_notification(&self, id: &str, notification: arg::PropMap) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.portal.Notification", "AddNotification", (id, notification, ))
    }

    fn remove_notification(&self, id: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.portal.Notification", "RemoveNotification", (id, ))
    }

    fn version(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.portal.Notification", "version")
    }
}
